Date: Tue, 11 Nov 2014 12:00:48 -0500
Subject: [PATCH 1/2] wifi: Signal on the wifi device when its supplicant is
 done scanning.

This makes it possible for applications outside NetworkManager to listen for
that signal, and use it along with RequestScan to get very up-to-date scan
results.

Signed-off-by: Mathieu Trudel-Lapierre <mathieu.trudel-lapierre@canonical.com>
---
 introspection/nm-device-wifi.xml                 |    7 +++++++
 src/devices/wifi/nm-device-wifi.c                |   10 ++++++++++
 src/devices/wifi/nm-device-wifi.h                |    1 +
 src/supplicant-manager/nm-supplicant-interface.c |    2 +-
 4 files changed, 19 insertions(+), 1 deletion(-)

Index: b/introspection/nm-device-wifi.xml
===================================================================
--- a/introspection/nm-device-wifi.xml
+++ b/introspection/nm-device-wifi.xml
@@ -120,5 +120,12 @@
     <signal name="AccessPointRemoved">
       <arg name="access_point" type="o"/>
     </signal>
+
+    <!--
+	ScanDone:
+
+        Emitted when the device has finished scanning for new APs.
+    -->
+    <signal name="ScanDone"/>
   </interface>
 </node>
Index: b/src/devices/wifi/nm-device-wifi.c
===================================================================
--- a/src/devices/wifi/nm-device-wifi.c
+++ b/src/devices/wifi/nm-device-wifi.c
@@ -84,6 +84,7 @@ enum {
 	ACCESS_POINT_ADDED,
 	ACCESS_POINT_REMOVED,
 	SCANNING_ALLOWED,
+	SCAN_DONE,
 
 	LAST_SIGNAL
 };
@@ -1363,6 +1364,7 @@ supplicant_iface_scan_done_cb (NMSupplic
 
 	_LOGD (LOGD_WIFI_SCAN, "scan %s", success ? "successful" : "failed");
 
+	g_signal_emit (self, signals[SCAN_DONE], 0, NULL);
 	priv->last_scan = nm_utils_get_monotonic_timestamp_s ();
 	schedule_scan (self, success);
 
@@ -3082,6 +3084,14 @@ nm_device_wifi_class_init (NMDeviceWifiC
 		              scanning_allowed_accumulator, NULL, NULL,
 		              G_TYPE_BOOLEAN, 0);
 
+	signals[SCAN_DONE] =
+		g_signal_new ("scan-done",
+					  G_OBJECT_CLASS_TYPE (object_class),
+					  G_SIGNAL_RUN_FIRST,
+					  G_STRUCT_OFFSET (NMDeviceWifiClass, scan_done),
+					  NULL, NULL, NULL,
+					  G_TYPE_NONE, 0);
+
 	nm_exported_object_class_add_interface (NM_EXPORTED_OBJECT_CLASS (klass),
 	                                        NMDBUS_TYPE_DEVICE_WIFI_SKELETON,
 	                                        "GetAccessPoints", impl_device_wifi_get_access_points,
Index: b/src/devices/wifi/nm-device-wifi.h
===================================================================
--- a/src/devices/wifi/nm-device-wifi.h
+++ b/src/devices/wifi/nm-device-wifi.h
@@ -68,6 +68,7 @@ struct _NMDeviceWifiClass
 	void (*access_point_added)   (NMDeviceWifi *device, NMAccessPoint *ap);
 	void (*access_point_removed) (NMDeviceWifi *device, NMAccessPoint *ap);
 	gboolean (*scanning_allowed) (NMDeviceWifi *device);
+	void (*scan_done) (NMDeviceWifi *device);
 };
 
 
Index: b/src/supplicant-manager/nm-supplicant-interface.c
===================================================================
--- a/src/supplicant-manager/nm-supplicant-interface.c
+++ b/src/supplicant-manager/nm-supplicant-interface.c
@@ -1334,8 +1334,8 @@ scan_request_cb (GDBusProxy *proxy, GAsy
 			g_dbus_error_strip_remote_error (error);
 			_LOGW ("could not get scan request result: %s", error->message);
 		}
+		g_signal_emit (self, signals[SCAN_DONE], 0, FALSE);
 	}
-	g_signal_emit (self, signals[SCAN_DONE], 0, error ? FALSE : TRUE);
 }
 
 gboolean
