From: Michael Biebl <biebl@debian.org>
Date: Wed, 2 Apr 2014 03:15:53 +0200
Subject: Force online state with unmanaged devices

If we have unmanaged devices in /e/n/i, monitor the ifupdown state file
and in case we find active interfaces besides lo, forcefully set the
online state to CONNECTED.

Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=512286
---
 src/nm-manager.c |  120 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 120 insertions(+)

Index: b/src/nm-manager.c
===================================================================
--- a/src/nm-manager.c
+++ b/src/nm-manager.c
@@ -57,6 +57,8 @@
 #include "nmdbus-manager.h"
 #include "nmdbus-device.h"
 
+#define IFUPDOWN_STATE_FILE "/run/network/ifstate"
+
 static gboolean add_device (NMManager *self, NMDevice *device, GError **error);
 
 static NMActiveConnection *_new_active_connection (NMManager *self,
@@ -137,6 +139,10 @@ typedef struct {
 	GFileMonitor *fw_monitor;
 	guint fw_changed_id;
 
+	/* ifupdown state file monitor */
+	GFileMonitor *ifstate_monitor;
+	gboolean ifstate_force_online;
+
 	guint timestamp_update_id;
 
 	gboolean startup;
@@ -687,6 +693,29 @@ find_best_device_state (NMManager *manag
 	return best_state;
 }
 
+static NMState
+find_unmanaged_state (NMManager *manager, NMState current_state)
+{
+	NMManagerPrivate *priv = NM_MANAGER_GET_PRIVATE (manager);
+	NMState new_state = current_state;
+	GSList *iter;
+
+	for (iter = priv->devices; iter; iter = iter->next) {
+		NMDevice *dev = NM_DEVICE (iter->data);
+		NMDeviceState state = nm_device_get_state (dev);
+
+
+		if (state == NM_DEVICE_STATE_UNMANAGED) {
+			const char *iface = nm_device_get_ip_iface (dev);
+			if (priv->ifstate_force_online) {
+				new_state = NM_STATE_CONNECTED_GLOBAL;
+				nm_log_dbg (LOGD_CORE, "Unmanaged device found: %s; state CONNECTED forced.", iface);
+			}
+		}
+	}
+	return new_state;
+}
+
 static void
 nm_manager_update_metered (NMManager *self)
 {
@@ -727,6 +756,9 @@ nm_manager_update_state (NMManager *mana
 
 	nm_connectivity_set_online (priv->connectivity, new_state >= NM_STATE_CONNECTED_LOCAL);
 
+	if (new_state != NM_STATE_CONNECTED_GLOBAL)
+		new_state = find_unmanaged_state (manager, new_state);
+
 	if (new_state == NM_STATE_CONNECTED_SITE) {
 		nm_connectivity_check_async (priv->connectivity,
 		                             checked_connectivity,
@@ -4400,6 +4432,65 @@ impl_manager_check_connectivity (NMManag
 }
 
 static void
+check_ifstate_file (gpointer user_data)
+{
+	NMManager *self = NM_MANAGER (user_data);
+	NMManagerPrivate *priv = NM_MANAGER_GET_PRIVATE (self);
+	GIOChannel *channel;
+	gchar *line;
+	gboolean online = FALSE;
+
+	channel = g_io_channel_new_file (IFUPDOWN_STATE_FILE, "r", NULL);
+	if (!channel) {
+		nm_log_warn (LOGD_CORE, "Error: failed to open %s", IFUPDOWN_STATE_FILE);
+		return;
+	}
+
+	while (g_io_channel_read_line (channel, &line, NULL, NULL, NULL)
+	       != G_IO_STATUS_EOF && !online) {
+		g_strstrip (line);
+		if (strlen (line) > 0 && g_strcmp0 (line, "lo=lo") != 0) {
+			online = TRUE;
+		}
+		g_free (line);
+	}
+
+	g_io_channel_shutdown (channel, FALSE, NULL);
+	g_io_channel_unref (channel);
+
+	if (priv->ifstate_force_online != online) {
+		priv->ifstate_force_online = online;
+		nm_manager_update_state (self);
+	}
+}
+
+static void
+ifstate_file_changed (GFileMonitor *monitor,
+                      GFile *file,
+                      GFile *other_file,
+                      GFileMonitorEvent event_type,
+                      gpointer user_data)
+{
+	NMManager *self = NM_MANAGER (user_data);
+	NMManagerPrivate *priv = NM_MANAGER_GET_PRIVATE (self);
+
+	switch (event_type) {
+//	case G_FILE_MONITOR_EVENT_CREATED:
+//#if GLIB_CHECK_VERSION(2,23,4)
+//	case G_FILE_MONITOR_EVENT_MOVED:
+//#endif
+//	case G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED:
+	case G_FILE_MONITOR_EVENT_CHANGED:
+	case G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT:
+		nm_log_dbg (LOGD_CORE, "ifupdown state file %s was changed", IFUPDOWN_STATE_FILE);
+		check_ifstate_file (user_data);
+		break;
+	default:
+		break;
+	}
+}
+
+static void
 start_factory (NMDeviceFactory *factory, gpointer user_data)
 {
 	nm_device_factory_start (factory);
@@ -4470,6 +4561,9 @@ nm_manager_start (NMManager *self, GErro
 
 	check_if_startup_complete (self);
 
+	/* Trigger ifupdown state file check */
+	check_ifstate_file (self);
+
 	return TRUE;
 }
 
@@ -5270,6 +5364,22 @@ nm_manager_init (NMManager *self)
 		       KERNEL_FIRMWARE_DIR);
 	}
 
+	/* Monitor the ifupdown state file */
+	file = g_file_new_for_path (IFUPDOWN_STATE_FILE);
+	priv->ifstate_monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE, NULL, NULL);
+	g_object_unref (file);
+
+	if (priv->ifstate_monitor) {
+		g_signal_connect (priv->ifstate_monitor, "changed",
+		                  G_CALLBACK (ifstate_file_changed),
+		                  self);
+		nm_log_info (LOGD_CORE, "monitoring ifupdown state file '%s'.",
+		             IFUPDOWN_STATE_FILE);
+	} else {
+		nm_log_warn (LOGD_CORE, "failed to monitor ifupdown state file '%s'.",
+		             IFUPDOWN_STATE_FILE);
+	}
+
 	/* Update timestamps in active connections */
 	priv->timestamp_update_id = g_timeout_add_seconds (300, (GSourceFunc) periodic_update_active_connection_timestamps, self);
 
@@ -5512,6 +5622,16 @@ dispose (GObject *object)
 		g_clear_object (&priv->fw_monitor);
 	}
 
+	if (priv->ifstate_monitor) {
+		g_signal_handlers_disconnect_by_func (priv->ifstate_monitor, ifstate_file_changed, manager);
+
+		if (priv->ifstate_force_online)
+			g_source_remove (priv->ifstate_force_online);
+
+		g_file_monitor_cancel (priv->ifstate_monitor);
+		g_clear_object (&priv->ifstate_monitor);
+	}
+
 	if (priv->rfkill_mgr) {
 		g_signal_handlers_disconnect_by_func (priv->rfkill_mgr, rfkill_manager_rfkill_changed_cb, manager);
 		g_clear_object (&priv->rfkill_mgr);
