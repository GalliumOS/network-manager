'\" t
.\"     Title: NetworkManager.conf
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 07/14/2015
.\"    Manual: Configuration
.\"    Source: NetworkManager 1.0
.\"  Language: English
.\"
.TH "NETWORKMANAGER\&.CON" "5" "" "NetworkManager 1\&.0" "Configuration"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
NetworkManager.conf \- NetworkManager configuration file
.SH "SYNOPSIS"
.PP
/etc/NetworkManager/NetworkManager\&.conf,
/etc/NetworkManager/conf\&.d/\fIname\fR\&.conf
.SH "DESCRIPTION"
.PP
This is a configuration file for NetworkManager\&. It is used to set up various aspects of NetworkManager\*(Aqs behavior\&. The location of the file may be changed through use of the
\fB\-\-config\fR
argument for NetworkManager\&.
.PP
If a default
NetworkManager\&.conf
is provided by your distribution\*(Aqs packages, you should not modify it, since your changes may get overwritten by package updates\&. Instead, you can add additional
\&.conf
files to the
conf\&.d
directory\&. These will be read in order, with later files overriding earlier ones\&.
.SH "FILE FORMAT"
.PP
The configuration file format is so\-called key file (sort of ini\-style format)\&. It consists of sections (groups) of key\-value pairs\&. Lines beginning with a \*(Aq#\*(Aq and blank lines are considered comments\&. Sections are started by a header line containing the section enclosed in \*(Aq[\*(Aq and \*(Aq]\*(Aq, and ended implicitly by the start of the next section or the end of the file\&. Each key\-value pair must be contained in a section\&.
.PP
For keys that take a list of devices as their value, you can specify devices by their MAC addresses or interface names, or "*" to specify all devices\&. See
the section called \(lqDevice List Format\(rq
below\&.
.PP
Minimal system settings configuration file looks like this:
.sp
.if n \{\
.RS 4
.\}
.nf
	[main]
	plugins=keyfile
      
.fi
.if n \{\
.RE
.\}
.PP
As an extension to the normal keyfile format, you can also append a value to a previously\-set list\-valued key by doing:
.sp
.if n \{\
.RS 4
.\}
.nf
	plugins+=another\-plugin
	plugins\-=remove\-me
      
.fi
.if n \{\
.RE
.\}
.sp
.SH "MAIN SECTION"
.PP
\fIplugins\fR
.RS 4
Lists system settings plugin names separated by \*(Aq,\*(Aq\&. These plugins are used to read and write system\-wide connections\&. When multiple plugins are specified, the connections are read from all listed plugins\&. When writing connections, the plugins will be asked to save the connection in the order listed here; if the first plugin cannot write out that connection type (or can\*(Aqt write out any connections) the next plugin is tried, etc\&. If none of the plugins can save the connection, an error is returned to the user\&.
.sp
If NetworkManager defines a distro\-specific network\-configuration plugin for your system, then that will normally be listed here\&. (See below for the available plugins\&.) Note that the
keyfile
plugin is always appended to the end of this list (if it doesn\*(Aqt already appear earlier in the list), so if there is no distro\-specific plugin for your system then you can leave this key unset and NetworkManager will fall back to using
keyfile\&.
.RE
.PP
\fImonitor\-connection\-files\fR
.RS 4
Whether the configured settings plugin(s) should set up file monitors and immediately pick up changes made to connection files while NetworkManager is running\&. This is disabled by default; NetworkManager will only read the connection files at startup, and when explicitly requested via the ReloadConnections D\-Bus call\&. If this key is set to \*(Aqtrue\*(Aq, then NetworkManager will reload connection files any time they changed\&.
.RE
.PP
\fIauth\-polkit\fR
.RS 4
Whether the system uses PolicyKit for authorization\&. If
false, all requests will be allowed\&. If
true, non\-root requests are authorized using PolicyKit\&. The default value is
true\&.
.RE
.PP
\fIdhcp\fR
.RS 4
This key sets up what DHCP client NetworkManager will use\&. Allowed values are
dhclient,
dhcpcd, and
internal\&. The
dhclient
and
dhcpcd
options require the indicated clients to be installed\&. The
internal
option uses a built\-in DHCP client which is not currently as featureful as the external clients (and in particular, does not yet support DHCPv6)\&.
.sp
If this key is missing, available DHCP clients are looked for in this order:
dhclient,
dhcpcd,
internal\&.
.RE
.PP
\fIno\-auto\-default\fR
.RS 4
Specify devices for which NetworkManager shouldn\*(Aqt create default wired connection (Auto eth0)\&. By default, NetworkManager creates a temporary wired connection for any Ethernet device that is managed and doesn\*(Aqt have a connection configured\&. List a device in this option to inhibit creating the default connection for the device\&. May have the special value
*
to apply to all devices\&.
.sp
When the default wired connection is deleted or saved to a new persistent connection by a plugin, the device is added to a list in the file
/var/run/NetworkManager/no\-auto\-default\&.state
to prevent creating the default connection for that device again\&.
.sp
See
the section called \(lqDevice List Format\(rq
for the syntax how to specify a device\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
no\-auto\-default=00:22:68:5c:5d:c4,00:1e:65:ff:aa:ee
no\-auto\-default=eth0,eth1
no\-auto\-default=*
	  
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fIignore\-carrier\fR
.RS 4
Specify devices for which NetworkManager will (partially) ignore the carrier state\&. Normally, for device types that support carrier\-detect, such as Ethernet and InfiniBand, NetworkManager will only allow a connection to be activated on the device if carrier is present (ie, a cable is plugged in), and it will deactivate the device if carrier drops for more than a few seconds\&.
.sp
Listing a device here will allow activating connections on that device even when it does not have carrier, provided that the connection uses only statically\-configured IP addresses\&. Additionally, it will allow any active connection (whether static or dynamic) to remain active on the device when carrier is lost\&.
.sp
Note that the "carrier" property of NMDevices and device D\-Bus interfaces will still reflect the actual device state; it\*(Aqs just that NetworkManager will not make use of that information\&.
.sp
See
the section called \(lqDevice List Format\(rq
for the syntax how to specify a device\&.
.RE
.PP
\fIassume\-ipv6ll\-only\fR
.RS 4
Specify devices for which NetworkManager will try to generate a connection based on initial configuration when the device only has an IPv6 link\-local address\&.
.sp
See
the section called \(lqDevice List Format\(rq
for the syntax how to specify a device\&.
.RE
.PP
\fIconfigure\-and\-quit\fR
.RS 4
When set to \*(Aqtrue\*(Aq, NetworkManager quits after performing initial network configuration but spawns small helpers to preserve DHCP leases and IPv6 addresses\&. This is useful in environments where network setup is more or less static or it is desirable to save process time but still handle some dynamic configurations\&. When this option is
true, network configuration for WiFi, WWAN, Bluetooth, ADSL, and PPPoE interfaces cannot be preserved due to their use of external services, and these devices will be deconfigured when NetworkManager quits even though other interface\*(Aqs configuration may be preserved\&. Also, to preserve DHCP addresses the \*(Aqdhcp\*(Aq option must be set to \*(Aqinternal\*(Aq\&. The default value of the \*(Aqconfigure\-and\-quit\*(Aq option is \*(Aqfalse\*(Aq, meaning that NetworkManager will continue running after initial network configuration and continue responding to system and hardware events, D\-Bus requests, and user commands\&.
.RE
.PP
\fIdns\fR
.RS 4
Set the DNS (resolv\&.conf) processing mode\&.
.sp
default: The default if the key is not specified\&. NetworkManager will update
resolv\&.conf
to reflect the nameservers provided by currently active connections\&.
.sp
dnsmasq: NetworkManager will run dnsmasq as a local caching nameserver, using a "split DNS" configuration if you are connected to a VPN, and then update
resolv\&.conf
to point to the local nameserver\&.
.sp
unbound: NetworkManager will talk to unbound and dnssec\-triggerd, providing a "split DNS" configuration with DNSSEC support\&. The /etc/resolv\&.conf will be managed by dnssec\-trigger daemon\&.
.sp
none: NetworkManager will not modify resolv\&.conf\&.
.RE
.PP
\fIdebug\fR
.RS 4
Comma separated list of options to aid debugging\&. This value will be combined with the environment variable
NM_DEBUG\&. Currently the following values are supported:
.sp
RLIMIT_CORE: set ulimit \-c unlimited to write out core dumps\&. Beware, that a core dump can contain sensitive information such as passwords or configuration settings\&.
.sp
fatal\-warnings: set g_log_set_always_fatal() to core dump on warning messages from glib\&. This is equivalent to the \-\-g\-fatal\-warnings command line option\&.
.RE
.SH "KEYFILE SECTION"
.PP
This section contains keyfile\-plugin\-specific options, and is normally only used when you are not using any other distro\-specific plugin\&.
.PP
.PP
\fIhostname\fR
.RS 4
Set a persistent hostname\&.
.RE
.PP
\fIunmanaged\-devices\fR
.RS 4
Set devices that should be ignored by NetworkManager\&.
.sp
See
the section called \(lqDevice List Format\(rq
for the syntax how to specify a device\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
unmanaged\-devices=interface\-name:em4
unmanaged\-devices=mac:00:22:68:1c:59:b1;mac:00:1E:65:30:D1:C4;interface\-name:eth2
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "IFUPDOWN SECTION"
.PP
This section contains ifupdown\-specific options and thus only has effect when using the
ifupdown
plugin\&.
.PP
.PP
\fImanaged\fR
.RS 4
If set to
true, then interfaces listed in
/etc/network/interfaces
are managed by NetworkManager\&. If set to
false, then any interface listed in
/etc/network/interfaces
will be ignored by NetworkManager\&. Remember that NetworkManager controls the default route, so because the interface is ignored, NetworkManager may assign the default route to some other interface\&.
.sp
The default value is
false\&.
.RE
.SH "LOGGING SECTION"
.PP
This section controls NetworkManager\*(Aqs logging\&. Any settings here are overridden by the
\fB\-\-log\-level\fR
and
\fB\-\-log\-domains\fR
command\-line options\&.
.PP
.PP
\fIlevel\fR
.RS 4
The default logging verbosity level\&. One of
ERR,
WARN,
INFO,
DEBUG,
TRACE\&. The ERR level logs only critical errors\&. WARN logs warnings that may reflect operation\&. INFO logs various informational messages that are useful for tracking state and operations\&. DEBUG enables verbose logging for debugging purposes\&. TRACE enables even more verbose logging then DEBUG level\&. Subsequent levels also log all messages from earlier levels; thus setting the log level to INFO also logs error and warning messages\&.
.RE
.PP
\fIdomains\fR
.RS 4
The following log domains are available: PLATFORM, RFKILL, ETHER, WIFI, BT, MB, DHCP4, DHCP6, PPP, WIFI_SCAN, IP4, IP6, AUTOIP4, DNS, VPN, SHARING, SUPPLICANT, AGENTS, SETTINGS, SUSPEND, CORE, DEVICE, OLPC, WIMAX, INFINIBAND, FIREWALL, ADSL, BOND, VLAN, BRIDGE, DBUS_PROPS, TEAM, CONCHECK, DCB, DISPATCH\&.
.sp
In addition, these special domains can be used: NONE, ALL, DEFAULT, DHCP, IP\&.
.sp
You can specify per\-domain log level overrides by adding a colon and a log level to any domain\&. E\&.g\&., "WIFI:DEBUG"\&.
.RE
.PP
.RS 4
.PP
Domain descriptions:
.RS 4
PLATFORM    : OS (platform) operations
.RE
.RS 4
RFKILL      : RFKill subsystem operations
.RE
.RS 4
ETHER       : Ethernet device operations
.RE
.RS 4
WIFI        : Wi\-Fi device operations
.RE
.RS 4
BT          : Bluetooth operations
.RE
.RS 4
MB          : Mobile broadband operations
.RE
.RS 4
DHCP4       : DHCP for IPv4
.RE
.RS 4
DHCP6       : DHCP for IPv6
.RE
.RS 4
PPP         : Point\-to\-point protocol operations
.RE
.RS 4
WIFI_SCAN   : Wi\-Fi scanning operations
.RE
.RS 4
IP4         : IPv4\-related operations
.RE
.RS 4
IP6         : IPv6\-related operations
.RE
.RS 4
AUTOIP4     : AutoIP (avahi) operations
.RE
.RS 4
DNS         : Domain Name System related operations
.RE
.RS 4
VPN         : Virtual Private Network connections and operations
.RE
.RS 4
SHARING     : Connection sharing
.RE
.RS 4
SUPPLICANT  : WPA supplicant related operations
.RE
.RS 4
AGENTS      : Secret agents operations and communication
.RE
.RS 4
SETTINGS    : Settings/config service operations
.RE
.RS 4
SUSPEND     : Suspend/resume
.RE
.RS 4
CORE        : Core daemon and policy operations
.RE
.RS 4
DEVICE      : Activation and general interface operations
.RE
.RS 4
OLPC        : OLPC Mesh device operations
.RE
.RS 4
WIMAX       : WiMAX device operations
.RE
.RS 4
INFINIBAND  : InfiniBand device operations
.RE
.RS 4
FIREWALL    : FirewallD related operations
.RE
.RS 4
ADSL        : ADSL device operations
.RE
.RS 4
BOND        : Bonding operations
.RE
.RS 4
VLAN        : VLAN operations
.RE
.RS 4
BRIDGE      : Bridging operations
.RE
.RS 4
DBUS_PROPS  : D\-Bus property changes
.RE
.RS 4
TEAM        : Teaming operations
.RE
.RS 4
CONCHECK    : Connectivity check
.RE
.RS 4
DCB         : Data Center Bridging (DCB) operations
.RE
.RS 4
DISPATCH    : Dispatcher scripts
.RE
.RS 4
 
.RE
.RS 4
NONE        : when given by itself logging is disabled
.RE
.RS 4
ALL         : all log domains
.RE
.RS 4
DEFAULT     : default log domains
.RE
.RS 4
DHCP        : shortcut for "DHCP4,DHCP6"
.RE
.RS 4
IP          : shortcut for "IP4,IP6"
.RE
.RS 4
 
.RE
.RS 4
HW          : deprecated alias for "PLATFORM"
.RE
.RE
.SH "CONNECTION SECTION"
.PP
This section allows to specify default values for connections\&. Not all properties can be overwritten, only a selected list below\&. You can have multiple
connection
sections, by having different sections with a name that all start with "connection"\&.
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
[connection]
ipv6\&.ip6\-privacy=0
connection\&.autoconnect\-slaves=1

[connection\-wifi\-wlan0]
match\-device=interface\-name:wlan0
ipv4\&.route\-metric=50

[connection\-wifi\-other]
match\-device=type:wifi
ipv4\&.route\-metric=55
ipv6\&.ip6\-privacy=1
.fi
.if n \{\
.RE
.\}
.PP
The sections within one file are considered in order of appearance, with the exception that the
[connection]
section is always considered last\&. In the example above, this order is
[connection\-wifi\-wlan0],
[connection\-wlan\-other], and
[connection]\&. When checking for a default configuration value, the section are searched until the requested value is found\&. In the example above, "ipv4\&.route\-metric" for wlan0 interface is set to 50, and for all other Wi\-Fi typed interfaces to 55\&. Also, Wi\-Fi devices would have IPv6 private addresses enabled by default, but other devices would have it disabled\&. Note that also "wlan0" gets "ipv6\&.ip6\-privacy=1", because although the section "[connection\-wifi\-wlan0]" matches the device, it does not contain that property and the search continues\&.
.PP
When having different sections in multiple files, sections from files that are read later have higher priority\&. So within one file the priority of the sections is top\-to\-bottom\&. Across multiple files later definitions take precedence\&.
.PP
.PP
\fImatch\-device\fR
.RS 4
An optional device spec that restricts when the section applies\&. See
the section called \(lqDevice List Format\(rq
for the possible values\&.
.RE
.PP
\fIstop\-match\fR
.RS 4
An optional boolean value which defaults to
no\&. If the section matches (based on
match\-device), further sections will not be considered even if the property in question is not present\&. In the example above, if
[connection\-wifi\-wlan0]
would have
stop\-match
set to
yes, its
ipv6\&.ip6\-privacy
value would be unspecified\&.
.RE
.PP
The following properties are supported to have their default values configured:
.PP
\fIipv4\&.route\-metric\fR
.RS 4
.RE
.PP
\fIipv6\&.ip6\-privacy\fR
.RS 4
If
ipv6\&.ip6\-privacy
is unset, use the content of "/proc/sys/net/ipv6/conf/default/use_tempaddr" as last fallback\&.
.RE
.PP
\fIipv6\&.route\-metric\fR
.RS 4
.RE
.PP
\fIconnection\&.autoconnect\-slaves\fR
.RS 4
.RE
.SH "CONNECTIVITY SECTION"
.PP
This section controls NetworkManager\*(Aqs optional connectivity checking functionality\&. This allows NetworkManager to detect whether or not the system can actually access the internet or whether it is behind a captive portal\&.
.PP
.PP
\fIuri\fR
.RS 4
The URI of a web page to periodically request when connectivity is being checked\&. This page should return the header "X\-NetworkManager\-Status" with a value of "online"\&. Alternatively, it\*(Aqs body content should be set to "NetworkManager is online"\&. The body content check can be controlled by the
response
option\&. If this option is blank or missing, connectivity checking is disabled\&.
.RE
.PP
\fIinterval\fR
.RS 4
Specified in seconds; controls how often connectivity is checked when a network connection exists\&. If set to 0 connectivity checking is disabled\&. If missing, the default is 300 seconds\&.
.RE
.PP
\fIresponse\fR
.RS 4
If set controls what body content NetworkManager checks for when requesting the URI for connectivity checking\&. If missing, defaults to "NetworkManager is online"
.RE
.SH "PLUGINS"
.PP
\fIkeyfile\fR
.RS 4
The
keyfile
plugin is the generic plugin that supports all the connection types and capabilities that NetworkManager has\&. It writes files out in an \&.ini\-style format in /etc/NetworkManager/system\-connections\&.
.sp
The stored connection file may contain passwords and private keys, so it will be made readable only to root, and the plugin will ignore files that are readable or writeable by any user or group other than root\&.
.sp
This plugin is always active, and will automatically be used to store any connections that aren\*(Aqt supported by any other active plugin\&.
.RE
.PP
\fIifcfg\-rh\fR
.RS 4
This plugin is used on the Fedora and Red Hat Enterprise Linux distributions to read and write configuration from the standard
/etc/sysconfig/network\-scripts/ifcfg\-*
files\&. It currently supports reading Ethernet, Wi\-Fi, InfiniBand, VLAN, Bond, Bridge, and Team connections\&.
.RE
.PP
\fIifcfg\-suse\fR
.RS 4
This plugin is only provided for simple backward compatibility with SUSE and OpenSUSE configuration\&. Most setups should be using the
keyfile
plugin instead\&. The
ifcfg\-suse
plugin supports reading Ethernet and Wi\-Fi connections, but does not support saving any connection types\&.
.RE
.PP
\fIifupdown\fR
.RS 4
This plugin is used on the Debian and Ubuntu distributions, and reads Ethernet and Wi\-Fi connections from
/etc/network/interfaces\&.
.sp
This plugin is read\-only; any connections (of any type) added from within NetworkManager when you are using this plugin will be saved using the
keyfile
plugin instead\&.
.RE
.PP
\fIibft\fR
.RS 4
This plugin allows to read iBFT configuration (iSCSI Boot Firmware Table)\&. The configuration is read using /sbin/iscsiadm\&. Users are expected to configure iBFT connections via the firmware interfaces\&.
.RE
.SH "APPENDIX"
.SS "Device List Format"
.PP
The configuration options
main\&.no\-auto\-default,
main\&.ignore\-carrier, and
keyfile\&.unmanaged\-devices
select devices based on a list of matchings\&. Devices can be specified using the following format:
.PP
.PP
*
.RS 4
Matches every device\&.
.RE
.PP
IFNAME
.RS 4
Case sensitive match of interface name of the device\&. Globbing is not supported\&.
.RE
.PP
HWADDR
.RS 4
Match the MAC address of the device\&. Globbing is not supported
.RE
.PP
interface\-name:IFNAME, interface\-name:~IFNAME
.RS 4
Case sensitive match of interface name of the device\&. Simple globbing is supported with
*
and
?\&. Ranges and escaping is not supported\&.
.RE
.PP
interface\-name:=IFNAME
.RS 4
Case sensitive match of interface name of the device\&. Globbing is disabled and
IFNAME
is taken literally\&.
.RE
.PP
mac:HWADDR
.RS 4
Match the MAC address of the device\&. Globbing is not supported
.RE
.PP
s390\-subchannels:HWADDR
.RS 4
Match the device based on the subchannel address\&. Globbing is not supported
.RE
.PP
type:TYPE
.RS 4
Match the device type\&. Valid type names are as reported by "nmcli \-f GENERAL\&.TYPE device show"\&. Globbing is not supported\&.
.RE
.PP
except:SPEC
.RS 4
Negative match of a device\&.
SPEC
must be explicitly qualified with a prefix such as
interface\-name:\&. A negative match has higher priority then the positive matches above\&.
.RE
.PP
SPEC[,;]SPEC
.RS 4
Multiple specs can be concatenated with comman or semicolon\&. The order does not matter as matches are either positive (inclusive) or negative, with negative matches having higher priority\&.
.sp
Backslash is supported to escape the separators \*(Aq;\*(Aq and \*(Aq,\*(Aq, and to express special characters such as newline (\*(Aq\en\*(Aq), tabulator (\*(Aq\et\*(Aq), whitespace (\*(Aq\es\*(Aq) and backslash (\*(Aq\e\e\*(Aq)\&. The globbing of interface names cannot be escaped\&. Whitespace is taken literally so usually the specs will be concatenated without spaces\&.
.RE
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
interface\-name:em4
mac:00:22:68:1c:59:b1;mac:00:1E:65:30:D1:C4;interface\-name:eth2
interface\-name:vboxnet*,except:interface\-name:vboxnet2
*,except:mac:00:22:68:1c:59:b1
        
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.PP
\fBNetworkManager\fR(8),
\fBnmcli\fR(1),
\fBnmcli-examples\fR(5),
\fBnm-online\fR(1),
\fBnm-settings\fR(5),
\fBnm-applet\fR(1),
\fBnm-connection-editor\fR(1)
