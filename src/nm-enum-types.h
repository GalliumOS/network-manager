


/* Generated by glib-mkenums. Do not edit */

#ifndef __NM_ENUM_TYPES_H__
#define __NM_ENUM_TYPES_H__

#include <nm-core-enum-types.h>
#include <glib-object.h>

G_BEGIN_DECLS
GType nm_vlan_error_get_type (void) G_GNUC_CONST;
#define NM_TYPE_VLAN_ERROR (nm_vlan_error_get_type ())
GType nm_unman_flag_op_get_type (void) G_GNUC_CONST;
#define NM_TYPE_UNMAN_FLAG_OP (nm_unman_flag_op_get_type ())
GType nm_dhcp_state_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DHCP_STATE (nm_dhcp_state_get_type ())
GType nm_dns_ip_config_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DNS_IP_CONFIG_TYPE (nm_dns_ip_config_type_get_type ())
GType nm_dns_manager_resolv_conf_mode_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DNS_MANAGER_RESOLV_CONF_MODE (nm_dns_manager_resolv_conf_mode_get_type ())
GType nm_dns_manager_resolv_conf_manager_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DNS_MANAGER_RESOLV_CONF_MANAGER (nm_dns_manager_resolv_conf_manager_get_type ())
GType nm_dns_masq_status_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DNS_MASQ_STATUS (nm_dns_masq_status_get_type ())
GType nm_platform_signal_change_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_PLATFORM_SIGNAL_CHANGE_TYPE (nm_platform_signal_change_type_get_type ())
GType nm_rdisc_dhcp_level_get_type (void) G_GNUC_CONST;
#define NM_TYPE_RDISC_DHCP_LEVEL (nm_rdisc_dhcp_level_get_type ())
GType nm_rdisc_preference_get_type (void) G_GNUC_CONST;
#define NM_TYPE_RDISC_PREFERENCE (nm_rdisc_preference_get_type ())
GType nm_rdisc_config_map_get_type (void) G_GNUC_CONST;
#define NM_TYPE_RDISC_CONFIG_MAP (nm_rdisc_config_map_get_type ())
GType nm_ppp_status_get_type (void) G_GNUC_CONST;
#define NM_TYPE_PPP_STATUS (nm_ppp_status_get_type ())
GType nm_settings_connection_flags_get_type (void) G_GNUC_CONST;
#define NM_TYPE_SETTINGS_CONNECTION_FLAGS (nm_settings_connection_flags_get_type ())
GType nm_settings_plugin_capabilities_get_type (void) G_GNUC_CONST;
#define NM_TYPE_SETTINGS_PLUGIN_CAPABILITIES (nm_settings_plugin_capabilities_get_type ())
GType nm_settings_plugin_prop_get_type (void) G_GNUC_CONST;
#define NM_TYPE_SETTINGS_PLUGIN_PROP (nm_settings_plugin_prop_get_type ())
GType nm_opt_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_OPT_TYPE (nm_opt_type_get_type ())
GType nm_supplicant_feature_get_type (void) G_GNUC_CONST;
#define NM_TYPE_SUPPLICANT_FEATURE (nm_supplicant_feature_get_type ())
GType nm_supplicant_error_get_type (void) G_GNUC_CONST;
#define NM_TYPE_SUPPLICANT_ERROR (nm_supplicant_error_get_type ())
GType nm_config_get_value_flags_get_type (void) G_GNUC_CONST;
#define NM_TYPE_CONFIG_GET_VALUE_FLAGS (nm_config_get_value_flags_get_type ())
GType nm_config_change_flags_get_type (void) G_GNUC_CONST;
#define NM_TYPE_CONFIG_CHANGE_FLAGS (nm_config_change_flags_get_type ())
GType nm_dispatcher_action_get_type (void) G_GNUC_CONST;
#define NM_TYPE_DISPATCHER_ACTION (nm_dispatcher_action_get_type ())
GType nm_auth_subject_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_AUTH_SUBJECT_TYPE (nm_auth_subject_type_get_type ())
GType nm_auth_call_result_get_type (void) G_GNUC_CONST;
#define NM_TYPE_AUTH_CALL_RESULT (nm_auth_call_result_get_type ())
GType nm_ip_config_source_get_type (void) G_GNUC_CONST;
#define NM_TYPE_IP_CONFIG_SOURCE (nm_ip_config_source_get_type ())
GType nm_link_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_LINK_TYPE (nm_link_type_get_type ())
GType nm_pobject_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_POBJECT_TYPE (nm_pobject_type_get_type ())
GType nm_ip_config_merge_flags_get_type (void) G_GNUC_CONST;
#define NM_TYPE_IP_CONFIG_MERGE_FLAGS (nm_ip_config_merge_flags_get_type ())
GType nm_match_spec_match_type_get_type (void) G_GNUC_CONST;
#define NM_TYPE_MATCH_SPEC_MATCH_TYPE (nm_match_spec_match_type_get_type ())
GType nm_utils_test_flags_get_type (void) G_GNUC_CONST;
#define NM_TYPE_UTILS_TEST_FLAGS (nm_utils_test_flags_get_type ())
G_END_DECLS

#endif /* __NM_ENUM_TYPES_H__ */



